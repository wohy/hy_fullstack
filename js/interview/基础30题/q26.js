"1 2 3".replace(/\d/g, parseInt) // \d  0-9之间的数字字符
// 如果 replace 方法第二个参数是一个函数，则会在匹配的时候多次调用
// 函数会传入两个参数，第一个是作用的字符，第二个是字符串的下标

// 则以上代码可看作
/**
 * parseInt(1, 0)  0 默认为十进制  十进制的1转为十进制 依然为 1
 * parseInt(2, 2)  2 为2进制  二进制只有 0 1 没有2 满2要往前进1 则为NaN
 * parseInt(3, 4)  4 为四进制 四进制的3 转为 十进制 为 3
 * 
 * 综上打印为 "1 NaN 3"
 */